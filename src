<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>API Keymaster</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="container mx-auto px-4 py-8">
    <header class="mb-8">
      <h1 class="text-3xl font-bold text-blue-600">API Keymaster</h1>
      <p class="text-gray-600">Secure API key management for developers</p>
    </header>

    <!-- Login Form -->
    <div id="login-section" class="bg-white p-6 rounded shadow-md mb-8">
      <h2 class="text-xl font-semibold mb-4">Access Your Vault</h2>
      <form id="login-form" class="space-y-4">
        <div>
          <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
          <input type="text" id="username" name="username" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" required>
        </div>
        <div>
          <label for="master-password" class="block text-sm font-medium text-gray-700">Master Password</label>
          <input type="password" id="master-password" name="masterPassword" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" required>
        </div>
        <div>
          <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Unlock Vault
          </button>
        </div>
      </form>
    </div>

    <!-- Vault Dashboard (hidden initially) -->
    <div id="vault-section" class="hidden">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-xl font-semibold">Your API Keys</h2>
        <div class="flex space-x-2">
          <button id="add-key-btn" class="py-2 px-4 bg-green-600 text-white rounded hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
            Add Key
          </button>
          <button id="logout-btn" class="py-2 px-4 bg-gray-600 text-white rounded hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
            Logout
          </button>
        </div>
      </div>

      <!-- Platform Tabs -->
      <div class="bg-white rounded shadow-md overflow-hidden">
        <div class="flex border-b">
          <button id="all-platforms-tab" class="flex-1 py-3 px-4 text-center bg-blue-600 text-white">All Platforms</button>
          <button id="github-tab" class="flex-1 py-3 px-4 text-center hover:bg-gray-100">GitHub</button>
          <button id="replit-tab" class="flex-1 py-3 px-4 text-center hover:bg-gray-100">Replit</button>
          <button id="netlify-tab" class="flex-1 py-3 px-4 text-center hover:bg-gray-100">Netlify</button>
        </div>
        
        <div id="keys-container" class="p-4">
          <p class="text-gray-500 text-center py-8">Loading your keys...</p>
        </div>
      </div>
    </div>

    <!-- Add Key Modal (hidden initially) -->
    <div id="add-key-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
      <div class="bg-white rounded-lg max-w-md w-full p-6">
        <h3 class="text-lg font-medium mb-4">Add New API Key</h3>
        <form id="add-key-form" class="space-y-4">
          <div>
            <label for="platform" class="block text-sm font-medium text-gray-700">Platform</label>
            <select id="platform" name="platform" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border">
              <option value="github">GitHub</option>
              <option value="replit">Replit</option>
              <option value="netlify">Netlify</option>
              <option value="other">Other</option>
            </select>
          </div>
          <div id="other-platform-container" class="hidden">
            <label for="other-platform" class="block text-sm font-medium text-gray-700">Custom Platform Name</label>
            <input type="text" id="other-platform" name="otherPlatform" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border">
          </div>
          <div>
            <label for="key-name" class="block text-sm font-medium text-gray-700">Key Name</label>
            <input type="text" id="key-name" name="keyName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" required>
          </div>
          <div>
            <label for="key-value" class="block text-sm font-medium text-gray-700">Key Value</label>
            <input type="password" id="key-value" name="keyValue" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border" required>
          </div>
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700">Description (Optional)</label>
            <input type="text" id="description" name="description" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm p-2 border">
          </div>
          <div class="flex justify-end space-x-3 pt-2">
            <button type="button" id="cancel-add-key" class="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Cancel
            </button>
            <button type="submit" class="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
              Save Key
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Global variables
      let currentUsername = '';
      let masterPassword = '';
      let currentPlatformFilter = 'all';
      
      // DOM elements
      const loginSection = document.getElementById('login-section');
      const vaultSection = document.getElementById('vault-section');
      const loginForm = document.getElementById('login-form');
      const addKeyBtn = document.getElementById('add-key-btn');
      const logoutBtn = document.getElementById('logout-btn');
      const addKeyModal = document.getElementById('add-key-modal');
      const addKeyForm = document.getElementById('add-key-form');
      const cancelAddKeyBtn = document.getElementById('cancel-add-key');
      const platformSelect = document.getElementById('platform');
      const otherPlatformContainer = document.getElementById('other-platform-container');
      const keysContainer = document.getElementById('keys-container');
      
      // Platform tabs
      const allPlatformsTab = document.getElementById('all-platforms-tab');
      const githubTab = document.getElementById('github-tab');
      const replitTab = document.getElementById('replit-tab');
      const netlifyTab = document.getElementById('netlify-tab');
      
      // Event Listeners
      loginForm.addEventListener('submit', handleLogin);
      addKeyBtn.addEventListener('click', showAddKeyModal);
      logoutBtn.addEventListener('click', handleLogout);
      addKeyForm.addEventListener('submit', handleAddKey);
      cancelAddKeyBtn.addEventListener('click', hideAddKeyModal);
      platformSelect.addEventListener('change', handlePlatformChange);
      
      // Tab event listeners
      allPlatformsTab.addEventListener('click', () => filterPlatform('all'));
      githubTab.addEventListener('click', () => filterPlatform('github'));
      replitTab.addEventListener('click', () => filterPlatform('replit'));
      netlifyTab.addEventListener('click', () => filterPlatform('netlify'));
      
      // Login handler
      async function handleLogin(e) {
        e.preventDefault();
        
        const username = document.getElementById('username').value;
        const password = document.getElementById('master-password').value;
        
        try {
          const response = await fetch('/.netlify/functions/api-keymaster/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, masterPassword: password })
          });
          
          const data = await response.json();
          
          if (response.ok) {
            currentUsername = username;
            masterPassword = password;
            showVault();
            loadKeys();
          } else {
            alert('Login failed: ' + (data.error || 'Unknown error'));
          }
        } catch (err) {
          alert('Error: ' + err.message);
        }
      }
      
      // Load keys from the vault
      async function loadKeys() {
        try {
          const response = await fetch('/.netlify/functions/api-keymaster/vault', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              masterPassword,
              operation: 'list'
            })
          });
          
          if (response.ok) {
            const data = await response.json();
            renderKeys(data);
          } else {
            const error = await response.json();
            alert('Failed to load keys: ' + (error.error || 'Unknown error'));
          }
        } catch (err) {
          alert('Error: ' + err.message);
        }
      }
      
      // Render keys in the UI
      function renderKeys(data) {
        // Clear container
        keysContainer.innerHTML = '';
        
        // Filter keys by platform if needed
        const platforms = Object.keys(data);
        
        if (platforms.length === 0) {
          keysContainer.innerHTML = `
            <div class="text-center py-8">
              <p class="text-gray-500">No API keys found. Add your first key to get started!</p>
            </div>
          `;
          return;
        }
        
        // Filter platforms if needed
        const filteredPlatforms = currentPlatformFilter === 'all' 
          ? platforms 
          : platforms.filter(p => p === currentPlatformFilter);
        
        if (filteredPlatforms.length === 0) {
          keysContainer.innerHTML = `
            <div class="text-center py-8">
              <p class="text-gray-500">No keys found for this platform.</p>
            </div>
          `;
          return;
        }
        
        // Create platform sections
        filteredPlatforms.forEach(platform => {
          const keys = data[platform];
          
          const platformSection = document.createElement('div');
          platformSection.className = 'mb-6';
          
          platformSection.innerHTML = `
            <h3 class="text-lg font-medium mb-2 capitalize">${platform}</h3>
            <div class="divide-y">
              ${keys.map(key => `
                <div class="py-3 flex justify-between items-center">
                  <div>
                    <p class="font-medium">${key.name}</p>
                    ${key.meta.description ? `<p class="text-sm text-gray-500">${key.meta.description}</p>` : ''}
                    <p class="text-xs text-gray-400">Added: ${new Date(key.added).toLocaleDateString()}</p>
                  </div>
                  <div class="flex space-x-2">
                    <button class="view-key-btn text-blue-600 hover:text-blue-800" data-platform="${platform}" data-key="${key.name}">
                      View
                    </button>
                    <button class="copy-key-btn text-green-600 hover:text-green-800" data-platform="${platform}" data-key="${key.name}">
                      Copy
                    </button>
                    <button class="delete-key-btn text-red-600 hover:text-red-800" data-platform="${platform}" data-key="${key.name}">
                      Delete
                    </button>
                  </div>
                </div>
              `).join('')}
            </div>
          `;
          
          keysContainer.appendChild(platformSection);
        });
        
        // Add event listeners for key actions
        document.querySelectorAll('.view-key-btn').forEach(btn => {
          btn.addEventListener('click', handleViewKey);
        });
        
        document.querySelectorAll('.copy-key-btn').forEach(btn => {
          btn.addEventListener('click', handleCopyKey);
        });
        
        document.querySelectorAll('.delete-key-btn').forEach(btn => {
          btn.addEventListener('click', handleDeleteKey);
        });
      }
      
      // Handle viewing a key
      async function handleViewKey(e) {
        const platform = e.target.dataset.platform;
        const keyName = e.target.dataset.key;
        
        try {
          const response = await fetch('/.netlify/functions/api-keymaster/vault', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              masterPassword,
              operation: 'get',
              platform,
              keyName
            })
          });
          
          if (response.ok) {
            const data = await response.json();
            alert(`${platform}/${keyName}: ${data.value}`);
          } else {
            const error = await response.json();
            alert('Failed to get key: ' + (error.error || 'Unknown error'));
          }
        } catch (err) {
          alert('Error: ' + err.message);
        }
      }
      
      // Handle copying a key
      async function handleCopyKey(e) {
        const platform = e.target.dataset.platform;
        const keyName = e.target.dataset.key;
        
        try {
          const response = await fetch('/.netlify/functions/api-keymaster/vault', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              masterPassword,
              operation: 'get',
              platform,
              keyName
            })
          });
          
          if (response.ok) {
            const data = await response.json();
            await navigator.clipboard.writeText(data.value);
            
            // Show temporary success message
            const originalText = e.target.textContent;
            e.target.textContent = 'Copied!';
            e.target.classList.add('text-green-800');
            
            setTimeout(() => {
              e.target.textContent = originalText;
              e.target.classList.remove('text-green-800');
            }, 2000);
          } else {
            const error = await response.json();
            alert('Failed to copy key: ' + (error.error || 'Unknown error'));
          }
        } catch (err) {
          alert('Error: ' + err.message);
        }
      }
      
      // Handle deleting a key
      async function handleDeleteKey(e) {
        const platform = e.target.dataset.platform;
        const keyName = e.target.dataset.key;
        
        if (!confirm(`Are you sure you want to delete the key "${keyName}" from ${platform}?`)) {
          return;
        }
        
        try {
          const response = await fetch('/.netlify/functions/api-keymaster/vault', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              masterPassword,
              operation: 'remove',
              platform,
              keyName
            })
          });
          
          if (response.ok) {
            loadKeys(); // Refresh the key list
          } else {
            const error = await response.json();
            alert('Failed to delete key: ' + (error.error || 'Unknown error'));
          }
        } catch (err) {
          alert('Error: ' + err.message);
        }
      }
      
      // Handle adding a new key
      async function handleAddKey(e) {
        e.preventDefault();
        
        let platform = platformSelect.value;
        const keyName = document.getElementById('key-name').value;
        const keyValue = document.getElementById('key-value').value;
        const description = document.getElementById('description').value;
        
        // If "other" platform is selected, get the custom platform name
        if (platform === 'other') {
          platform = document.getElementById('other-platform').value;
          if (!platform) {
            alert('Please enter a platform name');
            return;
          }
        }
        
        try {
          const response = await fetch('/.netlify/functions/api-keymaster/vault', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              masterPassword,
              operation: 'add',
              platform,
              keyName,
              keyValue,
              meta: {
                description
              }
            })
          });
          
          if (response.ok) {
            hideAddKeyModal();
            loadKeys(); // Refresh the key list
            addKeyForm.reset();
          } else {
            const error = await response.json();
            alert('Failed to add key: ' + (error.error || 'Unknown error'));
          }
        } catch (err) {
          alert('Error: ' + err.message);
        }
      }
      
      // Handle platform change in the add key form
      function handlePlatformChange() {
        if (platformSelect.value === 'other') {
          otherPlatformContainer.classList.remove('hidden');
        } else {
          otherPlatformContainer.classList.add('hidden');
        }
      }
      
      // Handle platform filtering
      function filterPlatform(platform) {
        currentPlatformFilter = platform;
        
        // Update active tab UI
        [allPlatformsTab, githubTab, replitTab, netlifyTab].forEach(tab => {
          tab.classList.remove('bg-blue-600', 'text-white');
          tab.classList.add('hover:bg-gray-100');
        });
        
        // Set active tab
        const activeTab = {
          'all': allPlatformsTab,
          'github': githubTab,
          'replit': replitTab,
          'netlify': netlifyTab
        }[platform];
        
        activeTab.classList.add('bg-blue-600', 'text-white');
        activeTab.classList.remove('hover:bg-gray-100');
        
        // Reload keys with filter
        loadKeys();
      }
      
      // Handle logout
      async function handleLogout() {
        try {
          await fetch('/.netlify/functions/api-keymaster/logout', {
            method: 'POST'
          });
          
          // Reset state and UI
          currentUsername = '';
          masterPassword = '';
          showLogin();
          document.getElementById('login-form').reset();
        } catch (err) {
          alert('Error during logout: ' + err.message);
        }
      }
      
      // Show login section
      function showLogin() {
        loginSection.classList.remove('hidden');
        vaultSection.classList.add('hidden');
      }
      
      // Show vault section
      function showVault() {
        loginSection.classList.add('hidden');
        vaultSection.classList.remove('hidden');
      }
      
      // Show add key modal
      function showAddKeyModal() {
        addKeyModal.classList.remove('hidden');
      }
      
      // Hide add key modal
      function hideAddKeyModal() {
        addKeyModal.classList.add('hidden');
        addKeyForm.reset();
        otherPlatformContainer.classList.add('hidden');
      }
      
      // Check for existing session on page load
      async function checkSession() {
        try {
          const response = await fetch('/.netlify/functions/api-keymaster/vault', {
            method: 'GET'
          });
          
          if (response.ok) {
            const data = await response.json();
            if (data.username) {
              // We have a session, but need the master password
              const passwordPrompt = prompt('Enter your master password to continue:');
              if (passwordPrompt) {
                currentUsername = data.username;
                masterPassword = passwordPrompt;
                showVault();
                loadKeys();
              }
            }
          }
        } catch (err) {
          console.error('Session check error:', err);
        }
      }
      
      // Call session check on page load
      checkSession();
    </script>
</body>
</html>

